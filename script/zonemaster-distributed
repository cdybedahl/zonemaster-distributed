#!/usr/bin/env perl

use 5.14.2;
use warnings;

use Zonemaster::Distributed;

Zonemaster::Distributed->new_with_options->do_run;

=head1 NAME

zonemaster-distributed - control a daemon running Zonemaster tests

=head1 SYNOPSIS

    zonemaster-distributed
    zonemaster-distributed --dbhost=some.other.org --dbname=zmc --dbuser=zone --dbpass=master --setup --no-run
    zonemaster.distributed --dbuser=local --dbpass=user --pid_file=/tmp/zonemaster.pid --command=start

=head1 DESCRIPTION

C<zonemaster-distributed> is a script that starts, configures and controls a
daemon that talks to a CouchDB database, and executes L<Zonemaster> tests
according to requests added to the database. For details on the format of the
requests (and the results), see the C<README> file in this distribution.

=head1 OPTIONS

=over

=item -h --help -?

Display a summary help text and then quit.

=item --dbhost

The hostname of the server running the CouchDB instance the program should use.
Defaults to C<localhost>.

=item --dbname

The name of the database at the CouchDB server to use. Defaults to C<zonemaster>.

=item --dbuser

The username used to authenticate to the CouchDB server. Does not have a
default. If it is not given, CouchDB will be assumed to be in "admin party"
mode and no attempt to authenticate will be made.

=item --dbpass

The password to go with the username. Required if C<--dbuser> is given, ignored
if not. Does not have a default value, for obvious reasons.

=item --limit

The maximum number of concurrent scanning processes allowed. Defaults to 10.

=item --nodename

The name of this scanning node. Defaults to whatever the local machine thinks
its name is. Used for collision avoidance within a replication network, so it
must be unique within it. You should only need to set this manually if you for
some reason are running more than one daemon on the same machine and
talking to the same database.

=item --run, --no-run

Specifies if the actual daemon should be spawned or not. Defaults to running it.

=item --setup, --no-setup

Specifies if the CouchDB database should be created and the necessary design
documents added before the daemon is (possibly) started. Defaults to not doing
that.

=item --peer

Takes a URL to another CouchDB zonemaster database as its argument, and sets up
replication to and from the local database. This flag can be given multiple
times in order to set up replications to multiple other servers. Once added to
the local database, the replications are permanent until manually removed.

=item --verbosity

Can be one of the strings C<trace>, C<debug>, C<info>, C<warn>, C<error> or
C<fatal> and specifies how verbose the local daemon should be about what it's
doing. Despite the similarity in names, has nothing whatsoever to do with
L<Zonemaster> log levels.

=item --clean, --no-clean

Specifies if the daemon should delete queue entries marked as belonging to
itself and being in progress when it starts. The assumption is that such
documents are leftovers from the daemon crashing, and thus not useful and
possibly dangerous. The default is not to do cleanup at start.

=item --command

A startup script type command to the daemon control module. Pointless if
C<--no-run> is active. Possible commands are:

=over

=item start

Start the daemon, if it's not already running.

=item stop

Stop the daemon if it's running.

=item restart

First stop and then start the daemon.

=item reload

Send the daemon a C<HUP> signal. Currently does nothing.

=item status

Print information on if the daemon control system thinks the daemon is running
or not.

=item get_init_file

Print a Linux-style init file for this script.

=back

=item --pid_file

Path to the file where the daemon control software will store the daemon's PID
while it's running. Defaults to C</var/run/[dbname]-[nodename].pid>.

=back

